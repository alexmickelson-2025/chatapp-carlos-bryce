@page "/"
@using Logic
@using System.Text.Json
@using System.Text
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div>@apiWorks</div>
<div>API URL: @url</div>

<h3>Send a Message</h3>
<div>ID: @Id</div>
<div>Counter: @localCounter</div>

<div class="form-container">
    <label for="keyInput" class="form-label">Sender:</label>
    <input type="text" id="keyInput" @bind="author" class="form-input" />

    <label for="valueInput" class="form-label">Message:</label>
    <input type="text" id="valueInput" @bind="messageContent" class="form-input" />
    <div id="image-add" >
<label for="image">
          Enter an Image
</label>
<div>

<InputFile OnChange="OnFileChange" />


@if (errorMessage != null)
{
    <div class="text-danger">@errorMessage</div>
}
</div>
</div>

    <button @onclick="createMessage" class="btn btn-primary">Send</button>

        <div class="error-message">@fileErrorMessage</div>

</div>

<button @onclick="getAllMessages" class="btn btn-secondary">Get Messages</button>
<button @onclick="deleteAllMessages" class="btn btn-secondary">Delete All Messages</button>


<h2>Messages</h2>
<div class="messages-container">
    @foreach(var message in messages)
    {
        <div class="message-card">
            <div class="message-author"><strong>@message.author</strong></div>
            <div class="message-content">@message.content</div>
            <div class="message-time">@message.creationtime</div>
            <div class="message-time">@message.clockcounter</div>
            <img src="@($"http://localhost:8555/images/{portToAPINum[imagePathToPort[message.imagepath].ToString()]}/getImage?imagePath={message.imagepath}")" style="max-width: 100px; height: auto;" alt="Could not load image"/>
        </div>
    }
</div>



@code {
    public HttpClient httpClient = new HttpClient();
    string url = Environment.GetEnvironmentVariable("API_URL") ?? throw new Exception("API_URL environment variable not set");
    string ImageApiPort = Environment.GetEnvironmentVariable("IMAGE_API_PORT") ?? throw new Exception("IMAGE_API_PORT environment variable not set");
    string author;
    string messageContent;
    IBrowserFile? imageToUpload;
    string errorMessage;
    List<Message> messages = new List<Message>();
    Random random = new Random();
    int localCounter = 0;
    Guid Id = Guid.NewGuid();
    string apiWorks = "Nothing yet";
    Dictionary<string, int> imagePathToPort = new Dictionary<string, int>();
Dictionary<string, int> portToAPINum = new Dictionary<string, int>
{
    { "5105", 1 },
    { "5106", 2 },
    { "5107", 3 }
};


    private async Task createMessage()
    {
        if(author == null || messageContent == null)
        {
            errorMessage = "author or message is null";
            return;
        }
        else {
            errorMessage = "";
            Console.WriteLine("author and message exists");
        }

        var now = new DateTime(
            DateTime.Now.Year, 
            DateTime.Now.Month,
            DateTime.Now.Day, 
            DateTime.Now.Hour, 
            DateTime.Now.Minute, 
            0
        );

        localCounter += 1;
        var newMessage = new Message(Id, author, messageContent, now.ToString(), localCounter, null);
        MultipartFormDataContent content = new MultipartFormDataContent();

        if(imageToUpload is not null)
        {
        var stream = imageToUpload.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10 MB max
        var fileContent = new StreamContent(stream);
        fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(imageToUpload.ContentType);
        content.Add(fileContent, "image", imageToUpload.Name); 
        }

        var messageJson = JsonSerializer.Serialize(newMessage);
        var messageFormContent = new StringContent(messageJson, Encoding.UTF8, "application/json");

        content.Add(messageFormContent, "message");

        Console.WriteLine("new Message was " + content);

        await httpClient.PostAsync(url + "/messagesapi/api/message/addMessage", content);

    }
    private async Task getAllMessages()
    {
        messages = await httpClient.GetFromJsonAsync<List<Message>>(url + "/messagesapi/api/message/getMessages");

        if (messages is null)
        {
            throw new Exception("messages was null");
        }
        if(messages.Count == 0)
        {
            errorMessage = "Messages were empty";
            return;
        }

        int maxCounter = messages.Max(m => m.clockcounter);
        localCounter = Math.Max(localCounter, messages.Where(m => m.clockcounter == maxCounter).FirstOrDefault().clockcounter) + 1;
        messages = messages
            .OrderBy(m => m.clockcounter)
            .ThenBy(m => m.clientid)
            .ToList();

        foreach(var message in messages)
        {
            imagePathToPort[message.imagepath] = await httpClient.GetFromJsonAsync<int>(url + $"/messagesapi/api/message/getPort?imagePath={message.imagepath}");
    }
        }
    
    private async Task deleteAllMessages(MouseEventArgs args)
    {
        await httpClient.DeleteAsync(url + "/api/message/deleteAllMessages");
    }

     private string? fileErrorMessage;

 private async Task OnFileChange(InputFileChangeEventArgs e)    {
        var file = e.File;
        
        if (file == null)
        {
            fileErrorMessage = "No file selected.";
            return;
        }

        var fileType = file.ContentType;

        if (!fileType.Contains("png"))
        {
            fileErrorMessage = "Please select a PNG image file.";
        }
        else
        {
            errorMessage = null;

            imageToUpload = e.File;
        }
    }

    
}    
