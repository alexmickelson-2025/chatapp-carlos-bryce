@page "/"
@using Logic
@using System.Text.Json
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div>API URL: @url</div>
<h3>Send a Message</h3>
<div>ID: @Id</div>
<div>Counter: @localCounter</div>

<div class="form-container">
    <label for="keyInput" class="form-label">Sender:</label>
    <input type="text" id="keyInput" @bind="author" class="form-input" />

    <label for="valueInput" class="form-label">Message:</label>
    <input type="text" id="valueInput" @bind="messageContent" class="form-input" />

    <button @onclick="createMessage" class="btn btn-primary">Send</button>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">@errorMessage</div>
    }
</div>

<button @onclick="getAllMessages" class="btn btn-secondary">Get Messages</button>

<h2>Messages</h2>
<div class="messages-container">
    @foreach(var message in messages)
    {
        <div class="message-card">
            <div class="message-time">ClientId: @message.clientid</div>
            <div class="message-time">MessageId:@message.messageid</div>
            <div class="message-author"><strong>@message.author</strong></div>
            <div class="message-content">@message.content</div>
            <div class="message-time">@message.creationtime</div>
            <div class="message-time">@message.clockcounter</div>
        </div>
    }
</div>



@code {
    public HttpClient httpClient = new HttpClient();
    string url = Environment.GetEnvironmentVariable("API_URL") ?? throw new Exception("API_URL environment variable not set");
    string author;
    string messageContent;
    string errorMessage;
    List<Message> messages = new List<Message>();
    Random random = new Random();
    int localCounter = 0;
    Guid Id = Guid.NewGuid();


    private async Task createMessage()
    {
        if(author == null || messageContent == null)
        {
            errorMessage = "author or message is null";
            return;
        }
        else {
            errorMessage = "";
            Console.WriteLine("author and message exists");
        }

        var now = new DateTime(
            DateTime.Now.Year, 
            DateTime.Now.Month,
            DateTime.Now.Day, 
            DateTime.Now.Hour, 
            DateTime.Now.Minute, 
            0
        );

        localCounter += 1;
        var newMessage = new Message(Id, author, messageContent, now.ToString(), localCounter);
        await httpClient.PostAsJsonAsync<Message>(url + "/message/addMessage", newMessage);
    }
    private async Task getAllMessages()
    {
        messages = await httpClient.GetFromJsonAsync<List<Message>>(url + "/message/getMessages");

            if (messages is null || messages.Count == 0)
            {
                throw new Exception("messages was null");
            }

        int maxCounter = messages.Max(m => m.clockcounter);
        localCounter = Math.Max(localCounter, messages.Where(m => m.clockcounter == maxCounter).FirstOrDefault().clockcounter) + 1;
        messages = messages
            .OrderBy(m => m.clockcounter)
            .ThenBy(m => m.clientid)
            .ToList();
    }
}    
